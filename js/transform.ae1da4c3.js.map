{"version":3,"sources":["webpack:///./src/views/transform.vue?8077","webpack:///src/views/transform.vue","webpack:///./src/views/transform.vue?786b","webpack:///./src/views/transform.vue?548e","webpack:///./src/views/transform.vue?e446"],"names":["render","_vm","this","_h","$createElement","_self","_c","_m","staticRenderFns","staticClass","_v","staticStyle","attrs","name","data","component"],"mappings":"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","file":"js/transform.ae1da4c3.js","sourcesContent":["var render = function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _vm._m(0)}\nvar staticRenderFns = [function () {var _vm=this;var _h=_vm.$createElement;var _c=_vm._self._c||_h;return _c('div',{staticClass:\"transform-page\"},[_c('h2',[_vm._v(\"Трюк: раздельные функции CSS-трансформации\")]),_c('p',[_vm._v(\" Одно лишь свойство transform в CSS дает нам массу возможностей — можно вращать, сдвигать, масштабировать и не только, и всё это сразу. Но в том, что эти разные функции трансформации входят в одно свойство, таится ловушка. \")]),_c('p',[_vm._v(\" Часто бывает нужно применять разные трансформации для разных состояний элемента. Скажем, у нас есть кнопка, которая всегда будет смещена по вертикали на -150%. Когда пользователь наводит на нее мышкой, мы ее чуть уменьшим, а при нажатии (в активном состоянии) перевернем на 180 градусов. В этом примере для кнопки «My Button» приведен CSS-код, который первым приходит на ум по такому описанию, а кнопка «Expected» показывает, как добиться описанного поведения на самом деле. \")]),_c('iframe',{staticStyle:{\"width\":\"80%\"},attrs:{\"height\":\"400\",\"scrolling\":\"no\",\"title\":\"zYqwPjm\",\"src\":\"https://codepen.io/steellett/embed/zYqwPjm?height=265&theme-id=dark&default-tab=css,result\",\"frameborder\":\"no\",\"loading\":\"lazy\",\"allowtransparency\":\"true\",\"allowfullscreen\":\"true\"}},[_vm._v(\" See the Pen \"),_c('a',{attrs:{\"href\":\"https://codepen.io/steellett/pen/zYqwPjm\"}},[_vm._v(\"zYqwPjm\")]),_vm._v(\" by steellett ( \"),_c('a',{attrs:{\"href\":\"https://codepen.io/steellett\"}},[_vm._v(\"@steellett\")]),_vm._v(\") on \"),_c('a',{attrs:{\"href\":\"https://codepen.io\"}},[_vm._v(\"CodePen\")]),_vm._v(\". \")]),_c('p',[_vm._v(\" При наведении мы не просто добавляем масштаб к начальному состоянию кнопки… мы еще и переопределяем исходный сдвиг, так что она масштабируется и возвращается к translateY(0). \")]),_c('p',[_vm._v(\" Почему так? Из-за линейной алгебры. То, как происходят эти трансформации, зависит от других трансформаций и их порядка (так что translate(-50%, -50%) scale(.4) rotate(50deg) — не то же самое, что rotate(50deg) translate(-50%, -50%) scale(.4)), в сухом остатке там умножение матриц. Но обычно нам не надо знать настолько глубокие «внутренности» трансформаций. Обычно веб-разработчики просто хотят знать, как управлять этими функциями трансформации по отдельности. \")]),_c('iframe',{staticStyle:{\"width\":\"80%\"},attrs:{\"height\":\"400\",\"scrolling\":\"no\",\"title\":\"RwaVvGy\",\"src\":\"https://codepen.io/steellett/embed/RwaVvGy?height=265&theme-id=dark&default-tab=css,result\",\"frameborder\":\"no\",\"loading\":\"lazy\",\"allowtransparency\":\"true\",\"allowfullscreen\":\"true\"}},[_vm._v(\" See the Pen \"),_c('a',{attrs:{\"href\":\"https://codepen.io/steellett/pen/RwaVvGy\"}},[_vm._v(\"RwaVvGy\")]),_vm._v(\" by steellett ( \"),_c('a',{attrs:{\"href\":\"https://codepen.io/steellett\"}},[_vm._v(\"@steellett\")]),_vm._v(\") on \"),_c('a',{attrs:{\"href\":\"https://codepen.io\"}},[_vm._v(\"CodePen\")]),_vm._v(\". \")]),_c('p',[_vm._v(\" Chrome начал реализовывать отдельные свойства, так что translate, rotate, and scale стали полноправными свойствами, как видно в предыдущем примере (на момент публикации требует Chrome Canary). Но у этого есть свои ограничения: \")]),_c('ul',[_c('li',[_vm._v(\" Отдельные x-, y‑ и z-компоненты каждого из них по-прежнему привязаны к единому свойству. \")]),_c('li',[_vm._v(\" Преобразуются в матрицы они всегда в одном порядке: translate scale rotate. \")]),_c('li',[_vm._v(\"В ближайшее время — только в Chrome Canary.\")])]),_c('h2',[_vm._v(\"Так что же делать?\")]),_c('p',[_vm._v(\"Использовать CSS-переменные.\")]),_c('p',[_vm._v(\" Когда я слушал доклад Дэвида Хуршида о CSS-переменых, моим глазам вдруг открылась масса возможностей для применения их в анимации. А когда я начал совать переменные куда только можно, их мощь стала еще яснее. Без дальнейших церемоний… вот трюк, который даст нам больше гибкости (все «как», «что» и «почему» — сразу после примера). \")]),_c('iframe',{staticStyle:{\"width\":\"80%\"},attrs:{\"height\":\"400\",\"scrolling\":\"no\",\"title\":\"eYZWxgZ\",\"src\":\"https://codepen.io/steellett/embed/eYZWxgZ?height=265&theme-id=dark&default-tab=css,result\",\"frameborder\":\"no\",\"loading\":\"lazy\",\"allowtransparency\":\"true\",\"allowfullscreen\":\"true\"}},[_vm._v(\" See the Pen \"),_c('a',{attrs:{\"href\":\"https://codepen.io/steellett/pen/eYZWxgZ\"}},[_vm._v(\"eYZWxgZ\")]),_vm._v(\" by steellett ( \"),_c('a',{attrs:{\"href\":\"https://codepen.io/steellett\"}},[_vm._v(\"@steellett\")]),_vm._v(\") on \"),_c('a',{attrs:{\"href\":\"https://codepen.io\"}},[_vm._v(\"CodePen\")]),_vm._v(\". \")]),_c('p',[_vm._v(\" Мы задаем ключевой начальный transform нашему элементу с помощью всех переменных, которые мы собираемся менять. Модифицируя значение переменной для другого состояния, мы можем получить CSS-правило, более похожее на наш первоначальный код, но с гораздо большей гибкостью при усложнении. В этом примере мы обрабатываем намного больше наших первоначальных трех состояний, подключив к делу JavaScript (но это не обязательно: вот версия нашего первого примера с кнопкой на одном CSS). Фактически, тут по-прежнему определено одно CSS-свойство, и мы меняем только одну функцию трансформации за раз (без разницы, в JS или в CSS). \")]),_c('p',[_vm._v(\" Без CSS-переменных мы бы не обошлись без расчетов (причем далеко не всегда тривиальных) для текущего перехода при изменении каждой функции трансформации. Тогда мы могли бы узнать текущее значение каждой из двух других функций, чтобы убедиться, что переход останется плавным. \")]),_c('h2',[_vm._v(\"Чем это лучше будущих отдельных свойств из Chrome Canary?\")]),_c('ul',[_c('li',[_vm._v(\" Можно как угодно комбинировать x, y и z, поскольку мы сами решаем, как задать transform изначально. \")]),_c('li',[_vm._v(\" Аналогично, мы можем задавать какой нам угодно порядок функций трансформации (хотя и теряем не столь часто нужную, наверное, возможность менять этот порядок от одного состояния к другому). \")]),_c('li',[_vm._v(\" Я проверил, что это хорошо работает в новейшем Chrome (56), Firefox (50) и Safari (только в Technical Preview — Safari 10 поддерживает переменные, но без плавных переходов). Я пока не смог проверить в Edge Insider Preview (первой версии, которая поддерживает CSS-переменные) — так что, пожалуйста, сообщите, если у вас будут новости с того фронта. \")])])])}]\n\nexport { render, staticRenderFns }","<template>\r\n  <div class=\"transform-page\">\r\n    <h2>Трюк: раздельные функции CSS-трансформации</h2>\r\n    <p>\r\n      Одно лишь свойство transform в CSS дает нам массу возможностей — можно\r\n      вращать, сдвигать, масштабировать и не только, и всё это сразу. Но в том,\r\n      что эти разные функции трансформации входят в одно свойство, таится\r\n      ловушка.\r\n    </p>\r\n    <p>\r\n      Часто бывает нужно применять разные трансформации для разных состояний\r\n      элемента. Скажем, у нас есть кнопка, которая всегда будет смещена по\r\n      вертикали на -150%. Когда пользователь наводит на нее мышкой, мы ее чуть\r\n      уменьшим, а при нажатии (в активном состоянии) перевернем на 180 градусов.\r\n      В этом примере для кнопки «My Button» приведен CSS-код, который первым\r\n      приходит на ум по такому описанию, а кнопка «Expected» показывает, как\r\n      добиться описанного поведения на самом деле.\r\n    </p>\r\n    <iframe\r\n      height=\"400\"\r\n      style=\"width: 80%;\"\r\n      scrolling=\"no\"\r\n      title=\"zYqwPjm\"\r\n      src=\"https://codepen.io/steellett/embed/zYqwPjm?height=265&theme-id=dark&default-tab=css,result\"\r\n      frameborder=\"no\"\r\n      loading=\"lazy\"\r\n      allowtransparency=\"true\"\r\n      allowfullscreen=\"true\"\r\n    >\r\n      See the Pen\r\n      <a href=\"https://codepen.io/steellett/pen/zYqwPjm\">zYqwPjm</a> by\r\n      steellett (\r\n      <a href=\"https://codepen.io/steellett\">@steellett</a>) on\r\n      <a href=\"https://codepen.io\">CodePen</a>.\r\n    </iframe>\r\n    <p>\r\n      При наведении мы не просто добавляем масштаб к начальному состоянию\r\n      кнопки… мы еще и переопределяем исходный сдвиг, так что она масштабируется\r\n      и возвращается к translateY(0).\r\n    </p>\r\n    <p>\r\n      Почему так? Из-за линейной алгебры. То, как происходят эти трансформации,\r\n      зависит от других трансформаций и их порядка (так что translate(-50%,\r\n      -50%) scale(.4) rotate(50deg) — не то же самое, что rotate(50deg)\r\n      translate(-50%, -50%) scale(.4)), в сухом остатке там умножение матриц. Но\r\n      обычно нам не надо знать настолько глубокие «внутренности» трансформаций.\r\n      Обычно веб-разработчики просто хотят знать, как управлять этими функциями\r\n      трансформации по отдельности.\r\n    </p>\r\n    <iframe\r\n      height=\"400\"\r\n      style=\"width: 80%;\"\r\n      scrolling=\"no\"\r\n      title=\"RwaVvGy\"\r\n      src=\"https://codepen.io/steellett/embed/RwaVvGy?height=265&theme-id=dark&default-tab=css,result\"\r\n      frameborder=\"no\"\r\n      loading=\"lazy\"\r\n      allowtransparency=\"true\"\r\n      allowfullscreen=\"true\"\r\n    >\r\n      See the Pen\r\n      <a href=\"https://codepen.io/steellett/pen/RwaVvGy\">RwaVvGy</a> by\r\n      steellett (\r\n      <a href=\"https://codepen.io/steellett\">@steellett</a>) on\r\n      <a href=\"https://codepen.io\">CodePen</a>.\r\n    </iframe>\r\n    <p>\r\n      Chrome начал реализовывать отдельные свойства, так что translate, rotate,\r\n      and scale стали полноправными свойствами, как видно в предыдущем примере\r\n      (на момент публикации требует Chrome Canary). Но у этого есть свои\r\n      ограничения:\r\n    </p>\r\n    <ul>\r\n      <li>\r\n        Отдельные x-, y‑ и z-компоненты каждого из них по-прежнему привязаны к\r\n        единому свойству.\r\n      </li>\r\n      <li>\r\n        Преобразуются в матрицы они всегда в одном порядке: translate scale\r\n        rotate.\r\n      </li>\r\n      <li>В ближайшее время — только в Chrome Canary.</li>\r\n    </ul>\r\n    <h2>Так что же делать?</h2>\r\n    <p>Использовать CSS-переменные.</p>\r\n    <p>\r\n      Когда я слушал доклад Дэвида Хуршида о CSS-переменых, моим глазам вдруг\r\n      открылась масса возможностей для применения их в анимации. А когда я начал\r\n      совать переменные куда только можно, их мощь стала еще яснее. Без\r\n      дальнейших церемоний… вот трюк, который даст нам больше гибкости (все\r\n      «как», «что» и «почему» — сразу после примера).\r\n    </p>\r\n    <iframe\r\n      height=\"400\"\r\n      style=\"width: 80%;\"\r\n      scrolling=\"no\"\r\n      title=\"eYZWxgZ\"\r\n      src=\"https://codepen.io/steellett/embed/eYZWxgZ?height=265&theme-id=dark&default-tab=css,result\"\r\n      frameborder=\"no\"\r\n      loading=\"lazy\"\r\n      allowtransparency=\"true\"\r\n      allowfullscreen=\"true\"\r\n    >\r\n      See the Pen\r\n      <a href=\"https://codepen.io/steellett/pen/eYZWxgZ\">eYZWxgZ</a> by\r\n      steellett (\r\n      <a href=\"https://codepen.io/steellett\">@steellett</a>) on\r\n      <a href=\"https://codepen.io\">CodePen</a>.\r\n    </iframe>\r\n    <p>\r\n      Мы задаем ключевой начальный transform нашему элементу с помощью всех\r\n      переменных, которые мы собираемся менять. Модифицируя значение переменной\r\n      для другого состояния, мы можем получить CSS-правило, более похожее на наш\r\n      первоначальный код, но с гораздо большей гибкостью при усложнении. В этом\r\n      примере мы обрабатываем намного больше наших первоначальных трех\r\n      состояний, подключив к делу JavaScript (но это не обязательно: вот версия\r\n      нашего первого примера с кнопкой на одном CSS). Фактически, тут\r\n      по-прежнему определено одно CSS-свойство, и мы меняем только одну функцию\r\n      трансформации за раз (без разницы, в JS или в CSS).\r\n    </p>\r\n    <p>\r\n      Без CSS-переменных мы бы не обошлись без расчетов (причем далеко не всегда\r\n      тривиальных) для текущего перехода при изменении каждой функции\r\n      трансформации. Тогда мы могли бы узнать текущее значение каждой из двух\r\n      других функций, чтобы убедиться, что переход останется плавным.\r\n    </p>\r\n    <h2>Чем это лучше будущих отдельных свойств из Chrome Canary?</h2>\r\n    <ul>\r\n      <li>\r\n        Можно как угодно комбинировать x, y и z, поскольку мы сами решаем, как\r\n        задать transform изначально.\r\n      </li>\r\n      <li>\r\n        Аналогично, мы можем задавать какой нам угодно порядок функций\r\n        трансформации (хотя и теряем не столь часто нужную, наверное,\r\n        возможность менять этот порядок от одного состояния к другому).\r\n      </li>\r\n      <li>\r\n        Я проверил, что это хорошо работает в новейшем Chrome (56), Firefox (50)\r\n        и Safari (только в Technical Preview — Safari 10 поддерживает\r\n        переменные, но без плавных переходов). Я пока не смог проверить в Edge\r\n        Insider Preview (первой версии, которая поддерживает CSS-переменные) —\r\n        так что, пожалуйста, сообщите, если у вас будут новости с того фронта.\r\n      </li>\r\n    </ul>\r\n  </div>\r\n</template>\r\n\r\n<script>\r\nexport default {\r\n  name: \"transform\",\r\n\r\n  data() {\r\n    return {};\r\n  },\r\n};\r\n</script>\r\n\r\n<style scoped>\r\niframe {\r\n  text-align: center;\r\n  width: 60%;\r\n}\r\n</style>\r\n","import mod from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./transform.vue?vue&type=script&lang=js&\"; export default mod; export * from \"-!../../node_modules/cache-loader/dist/cjs.js??ref--12-0!../../node_modules/thread-loader/dist/cjs.js!../../node_modules/babel-loader/lib/index.js!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./transform.vue?vue&type=script&lang=js&\"","import { render, staticRenderFns } from \"./transform.vue?vue&type=template&id=22849dbb&scoped=true&\"\nimport script from \"./transform.vue?vue&type=script&lang=js&\"\nexport * from \"./transform.vue?vue&type=script&lang=js&\"\nimport style0 from \"./transform.vue?vue&type=style&index=0&id=22849dbb&scoped=true&lang=css&\"\n\n\n/* normalize component */\nimport normalizer from \"!../../node_modules/vue-loader/lib/runtime/componentNormalizer.js\"\nvar component = normalizer(\n  script,\n  render,\n  staticRenderFns,\n  false,\n  null,\n  \"22849dbb\",\n  null\n  \n)\n\nexport default component.exports","import mod from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./transform.vue?vue&type=style&index=0&id=22849dbb&scoped=true&lang=css&\"; export default mod; export * from \"-!../../node_modules/mini-css-extract-plugin/dist/loader.js??ref--6-oneOf-1-0!../../node_modules/css-loader/dist/cjs.js??ref--6-oneOf-1-1!../../node_modules/vue-loader/lib/loaders/stylePostLoader.js!../../node_modules/postcss-loader/src/index.js??ref--6-oneOf-1-2!../../node_modules/cache-loader/dist/cjs.js??ref--0-0!../../node_modules/vue-loader/lib/index.js??vue-loader-options!./transform.vue?vue&type=style&index=0&id=22849dbb&scoped=true&lang=css&\""],"sourceRoot":""}